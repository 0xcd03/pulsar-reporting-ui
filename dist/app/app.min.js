/*
 pulsar-reporting-ui | 0.2.0
 Copyright (C) 2012-2015 eBay Software Foundation
 Licenses: MIT & Apache 2.0
*/
!function(){"use strict";var deps=["ngResource","ncy-angular-breadcrumb","pr.ui.creator","pr.ui.admin","pr.api","ui.router.menus"];try{angular.module("pr.tpls"),deps.push("pr.tpls")}catch(err){}try{angular.module("pr.demo"),deps.push("pr.demo")}catch(err){}angular.module("pr",deps).config(function($stateProvider,$urlRouterProvider,$breadcrumbProvider,prApiProvider){$stateProvider.state("home",{"abstract":!0,url:"",template:"<div ui-view></div>",controller:function($rootScope,$state){$rootScope.pageTitle=function(){return $state.current.data.pageTitle}},ncyBreadcrumb:{label:"Pulsar Reporting UI Sample App"},data:{pageTitle:"Home"}}),$breadcrumbProvider.setOptions({prefixStateName:"home",includeAbstract:!0}),$urlRouterProvider.otherwise("/demo/realtime")})}(),function(){"use strict";angular.module("pr.ui.creator",["ui.router","ui.bootstrap","pr.api","pr.date","pr.datasource","pr.dashboard","pr.dashboard.layouts","pr.dashboard.widgets.grid","pr.dashboard.widgets.bar","pr.dashboard.widgets.linewithfocus","pr.dashboard.widgets.groupedBar","pr.dashboard.widgets.metric","pr.dashboard.widgets.pie","pr.dashboard.widgets.stack","pr.dashboard.widgets.timeline"])}(),function(){"use strict";angular.module("pr.ui.creator").config(function($stateProvider){$stateProvider.state("home.creator",{weight:2,url:"/creator?:dashboard",views:{"":{templateUrl:"src/ui/creator/creator.html",controller:"CreatorController"},"dashboard@home.creator":{templateUrl:"src/ui/creator/creatorDashboard.html",controller:"CreatorDashboardController"}},resolve:{dashboards:function(prDashboardResource){return prDashboardResource.query({right:"view"}).$promise},editableDashboards:function(prDashboardResource){return prDashboardResource.query({right:"manage"}).$promise}},ncyBreadcrumb:{label:"Reports Creator"},data:{pageTitle:"Reports Creator"},menu:{name:"Reports Creator",icon:"fa fa-pencil",priority:1}})}).controller("CreatorController",function($scope,$modal,$stateParams,$state,$location,$log,prDashboardResource,dashboards,editableDashboards){$scope.dashboards=dashboards,$scope.editableDashboards=editableDashboards,$scope.dashboard=null,$scope.current=-1,$scope.savedDashboard=null,$scope.addDashboard=function(){var modalInstance=$modal.open({scope:$scope,backdrop:"static",templateUrl:"src/ui/creator/modals/add.html",controller:"CreatorModalAddController",size:"lg"});modalInstance.result.then(function(dashboard){$scope.dashboards.push(dashboard),$scope.selectDashboard($scope.dashboards.length-1),prDashboardResource.query({right:"manage"},function(editableDbs){angular.copy(editableDbs,$scope.editableDashboards)})},function(){$log.log("error")})},$scope.canEditDashboard=function(){var res=!1;return angular.forEach($scope.editableDashboards,function(editableDashboard){$scope.dashboard&&editableDashboard.name===$scope.dashboard.name&&(res=!0)}),res},$scope.deleteDashboard=function(){if($scope.canEditDashboard()){var modalInstance=$modal.open({scope:$scope,backdrop:"static",templateUrl:"src/ui/creator/modals/delete.html"});modalInstance.result.then(function(){$scope.dashboards[$scope.current].$delete(function(){$scope.selectDashboard(),prDashboardResource.query({right:"manage"},function(editableDbs){angular.copy(editableDbs,$scope.editableDashboards)}),prDashboardResource.query({right:"view"},function(dashboards){angular.copy(dashboards,$scope.dashboards)})})})}},$scope.selectDashboard=function(i){$scope.dashboards[i]?($scope.current=i,$scope.dashboard=$scope.dashboards[i],$scope.dashboard.$get(function(){$scope.savedDashboard=angular.copy($scope.dashboard)}),$stateParams.dashboard=$scope.dashboard.name,$state.params.dashboard=$scope.dashboard.name,$location.search("dashboard",$scope.dashboard.name)):($scope.dashboard=null,$scope.savedDashboard=null,$scope.current=-1,$stateParams.dashboard=void 0,$state.params.dashboard=void 0,$location.search("dashboard",void 0))},angular.isUndefined($stateParams.dashboard)?$scope.selectDashboard():angular.forEach($scope.dashboards,function(d,i){$stateParams.dashboard===d.name&&$scope.selectDashboard(i)})})}(),function(){"use strict";angular.module("pr.ui.creator").controller("CreatorDashboardController",function($scope,$modal,$filter,prApi,prDashboard){$scope.refreshDashboard=function(){$scope.dashboard.$get(function(){$scope.savedDashboard=angular.copy($scope.dashboard),$scope.dashboard&&$scope.dashboard.config&&$scope.dashboard.config.filters&&($scope.whereRaw=$scope.dashboard.config.filters.whereRaw||"")})},$scope.persistDashboard=function(){$scope.dashboard.$update(function(){$scope.savedDashboard=angular.copy($scope.dashboard)})},$scope.changeDateRange=function(start,end){$scope.dashboard.config.filters.intervals=$filter("intervalDate")(start)+"/"+$filter("intervalDate")(end)},$scope.removeFilter=function(name){delete $scope.dashboard.config.filters.where[name]},$scope.addRawFilter=function(filter){$scope.dashboard.config.filters.whereRaw=filter},$scope.isDashboardSaved=function(){return angular.equals($scope.dashboard,$scope.savedDashboard)},$scope.selectLayout=function(){var modalInstance=$modal.open({scope:$scope,backdrop:"static",templateUrl:"src/ui/creator/modals/layout.html",controller:"CreatorModalSelectLayoutController",size:"lg"});modalInstance.result.then(function(layoutId){$scope.dashboard.config.layout=layoutId})},$scope.setEditMode=function(editMode){$scope.editMode=editMode},$scope.addWidget=function(widgetType){var widget={type:widgetType,params:{dataSourceName:$scope.dashboard.config.dataSourceName||"",table:"",dimensions:[],metrics:[],maxResults:void 0,granularity:"all"},options:{title:"",disabled:!0}};$scope.dashboard.config.columns[0].widgets.unshift(widget)},$scope.widgets=prDashboard.widgets,$scope.$watch("dashboard.config.filters",function(filters){filters&&($scope.start=moment.tz(filters.intervals.split("/")[0],prApi.timezone).format("X"),$scope.end=moment.tz(filters.intervals.split("/")[1],prApi.timezone).format("X"),$scope.whereRaw=filters.whereRaw||"")},!0),$scope.editMode=!1})}(),function(){"use strict";angular.module("pr.ui.creator").controller("CreatorModalAddController",function($scope,$modalInstance,$filter,prApi,prDashboard,prDatasourceSqlService,prDashboardResource){$scope.saveError=null,$scope.add=function(){var structure=angular.copy(prDashboard.layouts[$scope.newDashboard.config.layout]);angular.extend($scope.newDashboard.config,structure),$scope.wait=!0,$scope.newDashboard.$save(function(){$scope.wait=!1,$modalInstance.close($scope.newDashboard)},function(error){$scope.wait=!1,$scope.saveError=error})};var startTime=moment().tz(prApi.timezone).startOf("day").subtract(1,"weeks").format("X"),endTime=moment().tz(prApi.timezone).endOf("day").subtract(1,"days").format("X");$scope.newDashboard=new prDashboardResource({displayName:"Dashboard "+($scope.dashboards.length+1),config:{dataSourceName:"",layout:"4-4-4",filters:{intervals:$filter("intervalDate")(startTime)+"/"+$filter("intervalDate")(endTime),where:{}}}}),$scope.wait=!0,$scope.dataSourcesError=null,prDatasourceSqlService.getDataSources({},{},function(data){$scope.dataSources=data,$scope.wait=!1},function(errorResponse){$scope.error="Error",$scope.wait=!1,errorResponse.data&&errorResponse.data.error&&($scope.dataSourcesError=errorResponse.data.error)})})}(),function(){"use strict";angular.module("pr.ui.creator").controller("CreatorModalSelectLayoutController",function($scope,$modalInstance,prDashboard){$scope.model={layouts:prDashboard.layouts,selected:$scope.dashboard.config.layout},$scope.select=function(){$modalInstance.close($scope.model.selected)}})}(),function(){"use strict";angular.module("pr.ui.admin",["ui.router","ui.select","ngSanitize","pr.ui.admin.resource","ui.grid","ui.grid.edit","ui.grid.selection","ui.bootstrap.modal"]).config(function($stateProvider,$urlRouterProvider){$stateProvider.state("home.admin",{weight:100,url:"/admin",controller:"AdminController",templateUrl:"src/ui/admin/admin.html",ncyBreadcrumb:{label:"Admin"},data:{pageTitle:"Admin"},menu:{name:"Admin",icon:"fa fa-user-plus",priority:0}})}).controller("AdminController",function($scope,$timeout,$q){$scope.tips={lists:[]};var tips={lists:$scope.tips.lists,autoClose:!0,duration:3e3,dismissTip:function(item){var removeIndex=this.lists.indexOf(item);-1!=removeIndex&&this.lists.splice(removeIndex,1)},addTip:function(tipOption){if(this.lists.length=0,this.lists.push(tipOption||{}),this.autoClose){var _this=this;$timeout(function(){_this.dismissTip(tipOption)},this.duration)}}};$scope.promiseTellViewFromManageForGridData=function(vPromise,mPromise){var deferForManageGroup=$q.defer();mPromise.then(function(data){deferForManageGroup.resolve(data)},function(data){deferForManageGroup.reject([])});var deferForViewGroup=$q.defer();vPromise.then(function(data){deferForViewGroup.resolve(data)},function(data){deferForViewGroup.resolve([])});var allDefer=$q.defer();return $q.all([deferForManageGroup.promise,deferForViewGroup.promise]).then(function(arr){var mGroups=arr[0],vGroups=arr[1],mNameArr=[];angular.forEach(mGroups,function(entity){mNameArr.push(entity.name),entity.editable=!0});var trueVGroups=[];angular.forEach(vGroups,function(entity){-1==_.indexOf(mNameArr,entity.name)&&(entity.editable=!1,trueVGroups.push(entity))});var rs=mGroups.concat(trueVGroups);allDefer.resolve(rs)},function(){allDefer.reject([])}),allDefer.promise},$scope.notification={success:function(msg){tips.addTip({title:"Success",message:msg,type:"Success"})},error:function(msg){tips.addTip({title:"Error",message:msg,type:"Error"})}}})}(),function(){"use strict";angular.module("pr.ui.admin").controller("DatasourceManageController",function($scope,$q,$timeout,prUIOptionService,Datasources,$modal){$scope.datasourceRefresh={loading:!0},$scope.grid=$scope.grid||{},$scope.grid.gridOptions=prUIOptionService.getGridOptions({enableSorting:!1,enableFiltering:!0,title:"DataSource Management",columnDefs:[{field:"name",displayName:"Datasource Name",width:"20%",cellTemplate:"src/ui/admin/datasourceManage/cellTemplates/adminDatasourceTooltipTemplate.html"},{field:"displayName",displayName:"Display Name",width:"20%",cellTemplate:"src/ui/admin/datasourceManage/cellTemplates/adminDatasourceTooltipTemplate.html"},{field:"endpoint",displayName:"Endpoint",cellTemplate:"src/ui/admin/datasourceManage/cellTemplates/adminDatasourceTooltipTemplate.html",width:"30%"},{field:"type",displayName:"Type",width:"10%",cellTemplate:"src/ui/admin/datasourceManage/cellTemplates/adminDatasourceTooltipTemplate.html"},{field:"owner",displayName:"Creator",width:"10%",cellTemplate:"src/ui/admin/datasourceManage/cellTemplates/adminDatasourceTooltipTemplate.html"},{field:"operation",enableFiltering:!1,headerCellClass:"text-center",headerTemplate:'<div class="ui-grid-top-panel" style="text-align: center">Operation</div>',displayName:"Operation",cellTemplate:"src/ui/admin/datasourceManage/cellTemplates/adminDatasourceOperateView.html",width:"10%"}],onRegisterApi:function(gridApi){$scope.gridApi=gridApi}}),$scope.datasourceParam={};var mDefer=$q.defer();Datasources.query({type:"manage"},{},function(data){mDefer.resolve(data)},function(data){mDefer.reject([])});var vDefer=$q.defer();Datasources.query({type:"view"},{},function(data){vDefer.resolve(data)},function(data){vDefer.reject([])});var allDatasourcesPromise=$scope.promiseTellViewFromManageForGridData(vDefer.promise,mDefer.promise);allDatasourcesPromise.then(function(result){$scope.grid.gridOptions.data.length=0,angular.forEach(result,function(d){$scope.grid.gridOptions.data.push(d)})},function(){$scope.notification.error("Load Datasources Failed")}),allDatasourcesPromise["finally"](function(){$scope.datasourceRefresh.loading=!1}),$scope.deleteDatasource=function(row){var modalInstance,deleteDataSources=[row.entity.name];modalInstance=$modal.open({templateUrl:"src/ui/admin/datasourceManage/delete/delete.html",controller:"DatasourceManageDeleteController",backdrop:"static",resolve:{deleteDataSources:function(){return deleteDataSources}}}),modalInstance.result.then(function(result){$scope.datasourceRefresh.loading=!0,result.promise.then(function(data){angular.forEach([row.entity],function(data,index){$scope.grid.gridOptions.data.splice($scope.grid.gridOptions.data.indexOf(data),1)}),$scope.notification.success("Delete Datasource Successfully")},function(data){$scope.notification.error("Delete Datasource Failed")})["finally"](function(){$scope.datasourceRefresh.loading=!1})},function(){})},$scope.addDatasource=function(){var modalInstance;modalInstance=$modal.open({backdrop:"static",templateUrl:"src/ui/admin/datasourceManage/add/add.html",controller:"DatasourceManageAddController"}),modalInstance.result.then(function(result){$scope.datasourceRefresh.loading=!0,result.promise.then(function(data){data.editable=!0,$scope.grid.gridOptions.data.unshift(data),$scope.notification.success("Add Datasource Successfully")},function(data){$scope.notification.error(data&&data.error||"Add Datasource Failed")})["finally"](function(){$scope.datasourceRefresh.loading=!1})},function(data){})},$scope.editDatasource=function(row){var modalInstance;modalInstance=$modal.open({backdrop:"static",templateUrl:"src/ui/admin/datasourceManage/edit/edit.html",controller:"DatasourceManageEditController",resolve:{datasource:function(){return row}}}),modalInstance.result.then(function(result){$scope.datasourceRefresh.loading=!0,result.promise.then(function(newRow){row.displayName=newRow.displayName,row.endpoint=newRow.endpoint,$scope.notification.success("Update Datasource Successfully")},function(data){$scope.notification.error("Update Datasource Failed")})["finally"](function(){$scope.datasourceRefresh.loading=!1})},function(data){})}})}(),function(){"use strict";angular.module("pr.ui.admin").controller("DatasourceManageAddController",function($scope,$modalInstance,Datasources,$q){$scope.datasourceParam={},$scope.cancel=function(){$modalInstance.dismiss("cancel")},$scope.save=function(){var datasource={displayName:$scope.datasourceParam.displayName,type:"druid",endpoint:$scope.datasourceParam.endpoint},defer=$q.defer();Datasources.add({},datasource,function(result){defer.resolve(result)},function(data){defer.reject(data.data)}),$modalInstance.close($q.resolve({promise:defer.promise}))}})}(),function(){"use strict";angular.module("pr.ui.admin").controller("DatasourceManageDeleteController",function($scope,$modalInstance,$q,Datasources,deleteDataSources){$scope["delete"]=function(){var defer=$q.defer();Datasources.remove({names:deleteDataSources},{},function(data){defer.resolve(data)},function(data){defer.reject(data)}),$modalInstance.close($q.resolve({promise:defer.promise}))}})}(),function(){"use strict";angular.module("pr.ui.admin").controller("DatasourceManageEditController",function($scope,$modalInstance,Datasources,datasource,$q){$scope.datasourceParam=angular.copy(datasource),$scope.cancel=function(){$modalInstance.dismiss()},$scope.ok=function(){var dataParam={name:$scope.datasourceParam.name,displayName:$scope.datasourceParam.displayName,type:$scope.datasourceParam.type,endpoint:$scope.datasourceParam.endpoint},defer=$q.defer(),result=defer.promise;Datasources.update(dataParam,function(result){return defer.resolve(dataParam),result},function(){defer.reject({})}),$modalInstance.close($q.resolve({promise:result}))}})}(),function(){"use strict";angular.module("pr.ui.admin").controller("GroupManageController",function($scope,$q,$timeout,GroupSearchService,GroupRightsTransform,prUIOptionService,$modal,Groups,GroupUsers,GroupRights,Datasources,SysRights,prDashboardResource){function registerGroupsUIControllersAndBelongData(groups){angular.forEach(groups,function(group,groupname){$scope.groupsControllers[groupname]={displayNameInLoading:!1,usersInLoading:!0},groupUsersPromise(groupname,group)["finally"](function(){$scope.groupsControllers[groupname].usersInLoading=!1})})}function groupUsersPromise(groupName,group){var groupUsersPathParam={groupName:groupName},groupUsersDataParam={},_defer=$q.defer();return GroupUsers.query(groupUsersPathParam,groupUsersDataParam,function(groupUsers){angular.forEach(groupUsers,function(val){group.users.push(val)}),_defer.resolve(groupUsers)},function(response){_defer.reject([])}),_defer.promise}function groupRightsPromise(groupName,group){var groupRightsPathParam={groupName:groupName},groupRightsDataParam={},defer=$q.defer();return GroupRights.query(groupRightsPathParam,groupRightsDataParam,function(groupRights){var rightsSet=GroupRightsTransform.transform(groupRights);defer.resolve(rightsSet)},function(groupRights){defer.reject([])}),defer.promise}$scope.groupsRefresh={loading:!0},$scope.groupGrid=prUIOptionService.getGridOptions({enableRowSelection:!1,enableSorting:!1,enableFiltering:!0,multiSelect:!1,title:"DataSource Management",columnDefs:[{field:"name",displayName:"Group Name",width:"20%",cellTemplate:"src/ui/admin/groupManage/cellTemplates/groupsView/adminGroupNameView.html"},{field:"displayName",displayName:"Display Name",width:"20%",cellTemplate:"src/ui/admin/groupManage/cellTemplates/groupsView/adminGroupDisplayNameView.html"},{field:"users",filter:{condition:GroupSearchService.USERS_CONTAINS},displayName:"Users",width:"40%",cellTemplate:"src/ui/admin/groupManage/cellTemplates/groupsView/adminGroupUsersView.html"},{field:"owner",displayName:"Creator",width:"10%",cellTemplate:"src/ui/admin/groupManage/cellTemplates/groupsView/adminGroupCreatorView.html"},{field:"operation",enableFiltering:!1,displayName:"Operation",cellTemplate:"src/ui/admin/groupManage/cellTemplates/groupsView/adminGroupOperateView.html",width:"10%"}],onRegisterApi:function(gridApi){$scope.gridApi=gridApi}}),$scope.groups={},$scope.groupsControllers={};var groupPathParam={type:"manage"},groupDataParam={},mDefer=$q.defer();Groups.query(groupPathParam,groupDataParam,function(responseGroups){mDefer.resolve(responseGroups)},function(responseGroups){mDefer.reject([])});var vDefer=$q.defer();Groups.query({type:"view"},{},function(responseGroups){vDefer.resolve(responseGroups)},function(responseGroups){vDefer.reject([])});var allGroupsPromise=$scope.promiseTellViewFromManageForGridData(vDefer.promise,mDefer.promise);allGroupsPromise.then(function(responseGroups){angular.forEach(responseGroups,function(group){$scope.groups[group.name]={name:group.name,displayName:group.displayName,users:[],owner:group.owner,editable:group.editable}}),registerGroupsUIControllersAndBelongData($scope.groups),angular.forEach($scope.groups,function(group,groupname){$scope.groupGrid.data.push(group)})},function(){$scope.notification.error("Load Groups Failed")}),allGroupsPromise["finally"](function(){$scope.groupsRefresh.loading=!1}),$scope.editRow=function(groupname){$scope.groupsRefresh.loading=!0;var modalInstance=$modal.open({scope:$scope,templateUrl:"src/ui/admin/groupManage/update/edit.html",controller:"GroupEditDialogController",size:"lg",backdrop:"static",resolve:{groupname:function(){return groupname},groupdisplayname:function(){return $scope.groups[groupname].displayName},groupUsers:function(){return angular.copy($scope.groups[groupname].users)},userRightsOfdatasources:function(){var vDefer=$q.defer();Datasources.query({type:"view"},{},function(owningDataSources){vDefer.resolve(owningDataSources)},function(owningDataSources){vDefer.reject([])});var mDefer=$q.defer();return Datasources.query({type:"manage"},{},function(owningDataSources){mDefer.resolve(owningDataSources)},function(owningDataSources){mDefer.resolve([])}),$scope.promiseTellViewFromManageForGridData(vDefer.promise,mDefer.promise)},userRightsOfdashboards:function(){var vDefer=$q.defer();prDashboardResource.query({right:"view"},{},function(owningDashboards){vDefer.resolve(owningDashboards)},function(owningDashboards){vDefer.reject([])});var mDefer=$q.defer();return prDashboardResource.query({right:"manage"},{},function(owningDashboards){mDefer.resolve(owningDashboards)},function(owningDashboards){mDefer.reject([])}),$scope.promiseTellViewFromManageForGridData(vDefer.promise,mDefer.promise)},userRightsOfsystem:function(){var defer=$q.defer();return SysRights.query({},{},function(data){defer.resolve(data)},function(data){defer.reject(data)}),defer.promise},userRightsOfgroups:function(){var rights=[];return angular.forEach($scope.groups,function(group,groupname){var copy=angular.copy(group);rights.push(copy)}),rights},groupRights:function(){var result=groupRightsPromise(groupname,$scope.groups[groupname]);return result}}});modalInstance.opened.then(function(){},function(){$scope.notification.error("Get User Latest Rights Failed")})["finally"](function(){$scope.groupsRefresh.loading=!1}),modalInstance.result.then(function(result){var groupdisplaynamePromise=result.groupdisplaynameChanged;groupdisplaynamePromise&&($scope.groupsControllers[groupname].displayNameInLoading=!0,groupdisplaynamePromise.promise.then(function(updatedGroup){$scope.groups[groupname].displayName=updatedGroup.displayName,$scope.notification.success("Update Group Name Successfully")},function(updatedGroup){$scope.notification.error("Update Group Name Failed")})["finally"](function(){$scope.groupsControllers[groupname].displayNameInLoading=!1}));var usersPromise=result.usersChanged;usersPromise&&($scope.groupsControllers[groupname].usersInLoading=!0,usersPromise.promise.then(function(newUsers){$scope.groups[groupname].users.length=0,angular.forEach(newUsers,function(user){$scope.groups[groupname].users.push(user)}),$scope.notification.success("Update Users Successfully")},function(data){$scope.notification.error("Update Users Failed")})["finally"](function(){$scope.groupsControllers[groupname].usersInLoading=!1}));var rightsPromise=result.rightsChanged;rightsPromise&&($scope.groupsControllers[groupname].rightsInLoading=!0,rightsPromise.promise.then(function(newRights){$scope.notification.success("Update Rights Successfully")},function(data){$scope.notification.error("Update Rights Failed")}))},function(){})},$scope.prepareRemoveRow=function(groupName){var modalInstance=$modal.open({backdrop:"static",templateUrl:"src/ui/admin/groupManage/delete/removeDialogTemplate.html",controller:"GroupDeleteDialogController",size:"md"});modalInstance.result.then(function(){$scope.removeGroup(groupName)},function(info){})},$scope.removeGroup=function(groupName){var groupPathParam={groupName:groupName},groupDataParam={};$scope.groupsRefresh.loading=!0,Groups.remove(groupPathParam,groupDataParam,function(group){$scope.notification.success("Delete Group Successfully");var index=$scope.groupGrid.data.indexOf($scope.groups[groupName]);$scope.groupGrid.data.splice(index,1),delete $scope.groups[groupName],delete $scope.groupsControllers[groupName]},function(group){$scope.notification.error("Delete Group Failed")}).$promise["finally"](function(){$scope.groupsRefresh.loading=!1})},$scope.addOperation={},$scope.addNewGroup=function(){var groupPathParam={},groupDataParam={displayName:$scope.addOperation.newGroupName};$scope.addOperation.newGroupName&&($scope.groupsRefresh.loading=!0,Groups.add(groupPathParam,groupDataParam,function(group){group.users=[],group.datasources=[],group.dashboards=[],group.managedGroups=[],group.editable=!0,$scope.groups[group.name]=group,$scope.groupGrid.data.unshift(group),$scope.groupsControllers[group.name]={usersInLoading:!1,rightsInLoading:!1,displayNameInLoading:!1},$scope.addOperation.newGroupName="",$scope.notification.success("Add Group Successfully")},function(response){var data=response.data;$scope.notification.error(data&&data.error||"Add Group Failed")}).$promise["finally"](function(){$scope.groupsRefresh.loading=!1}))}})}(),function(){"use strict";angular.module("pr.ui.admin").factory("GroupSearchService",function(){var uiGridFilters={USERS_CONTAINS:function(term,cellVal){return _.findIndex(cellVal,function(username){return _.contains(username,term)})>-1}};return uiGridFilters}).service("GroupRightsTransform",function(){this.transform=function(groupRights){var newGroupRights=[],_MANAGE="_MANAGE",_VIEW="_VIEW";angular.forEach(groupRights,function(rawGroup){var rightName=null,rightNameSuffix=null;_.endsWith(rawGroup.rightName,_MANAGE)?(rightName=rawGroup.rightName.slice(0,rawGroup.rightName.length-_MANAGE.length),rightNameSuffix=_MANAGE):_.endsWith(rawGroup.rightName,_VIEW)?(rightName=rawGroup.rightName.slice(0,rawGroup.rightName.length-_VIEW.length),rightNameSuffix=_VIEW):(rightName=rawGroup.rightName,rightNameSuffix=""),rawGroup.rightName=rightName,rawGroup.rightType=rawGroup.rightType+"",rawGroup.rightNameSuffix=rightNameSuffix,newGroupRights.push(rawGroup)});var rightsSet=[];return angular.forEach(newGroupRights,function(right){rightsSet.push(right)}),rightsSet}})}(),function(){"use strict";angular.module("pr.ui.admin").controller("GroupEditDialogController",function($scope,$timeout,$q,prUIOptionService,uiGridConstants,$modalInstance,groupname,groupdisplayname,groupUsers,groupRights,userRightsOfgroups,userRightsOfdatasources,userRightsOfdashboards,userRightsOfsystem,Groups,GroupUsers,GroupRights){function isSelected(row){var entity=row.entity;return"0"==entity.rightType?entity.checked:entity._VIEW||entity._MANAGE}function markSelectedRows(selectedRights,allRights){var checkerHelper={};angular.forEach(selectedRights,function(right){if("0"==right.rightType)checkerHelper[right.rightName+right.rightType]={checked:!0};else{var defaultValue={_VIEW:!1,_MANAGE:!1},rightsSet=checkerHelper[right.rightName+right.rightType]=checkerHelper[right.rightName+right.rightType]||defaultValue;"_MANAGE"==right.rightNameSuffix?rightsSet._MANAGE=!0:rightsSet._VIEW=!0}}),angular.forEach(allRights,function(row){var right=row.entity,typedRightObj=checkerHelper[right.rightName+right.rightType];typedRightObj&&("0"==right.rightType?right.checked=!0:(right._VIEW=typedRightObj._VIEW,right._MANAGE=typedRightObj._MANAGE))})}function stringArrayEqual(a1,a2){if(a1.length!=a2.length)return!1;var flag=!0;return angular.forEach(a1,function(item){-1==a2.indexOf(item)&&(flag=!1)}),flag}function getSelectedRights(){var arr=[];return angular.forEach($scope.dialogGrid.data,function(datum){"0"==datum.rightType?datum.checked&&arr.push({rightName:datum.rightName,rightType:datum.rightType,rightNameSuffix:""}):(datum._MANAGE&&arr.push({rightName:datum.rightName,rightType:datum.rightType,rightNameSuffix:"_MANAGE"}),datum._VIEW&&arr.push({rightName:datum.rightName,rightType:datum.rightType,rightNameSuffix:"_VIEW"}))}),arr}var oldgroupdisplayname=groupdisplayname;$scope.groupdisplayname=groupdisplayname;var allRights=[];angular.forEach(userRightsOfdatasources,function(right){allRights.push({rightName:right.name,displayName:right.displayName,owner:right.owner,rightType:"1",editable:right.editable,_MANAGE:!1,_VIEW:!1})}),angular.forEach(userRightsOfdashboards,function(right){allRights.push({rightName:right.name,displayName:right.displayName,owner:right.owner,rightType:"2",editable:right.editable,_MANAGE:!1,_VIEW:!1})}),angular.forEach(userRightsOfgroups,function(right){allRights.push({rightName:right.name,displayName:right.displayName,owner:right.owner,rightType:"4",editable:right.editable,_MANAGE:!1,_VIEW:!1})}),angular.forEach(userRightsOfsystem,function(sysrightName){allRights.push({rightName:sysrightName,displayName:sysrightName,rightType:"0",checked:!1})}),$scope.users={"new":angular.copy(groupUsers),old:angular.copy(groupUsers)},$scope.selectedStatus="All",$scope.singleFilter=function(selectedVal){$scope.selectedStatus=selectedVal,$scope.gridApi.grid.refresh()},$scope.refilteringGridData=function(renderableRows){return"All"==$scope.selectedStatus?renderableRows:(angular.forEach(renderableRows,function(row){isSelected(row)||(row.visible=!1)}),renderableRows)},$scope.dialogGrid=prUIOptionService.getGridOptions({enableRowSelection:!0,enableFiltering:!0,enableSorting:!1,multiSelect:!0,columnDefs:[{field:"rightType",width:"15%",displayName:"Type",cellTemplate:"src/ui/admin/groupManage/cellTemplates/groupUpdate/groupUpdateRightTypeView.html",filter:{priority:200,type:uiGridConstants.filter.SELECT,selectOptions:[{value:"0",label:"System"},{value:"1",label:"Datasource"},{value:"2",label:"Dashboard"},{value:"4",label:"Group"}]}},{field:"rightName",displayName:"Name",cellTemplate:"src/ui/admin/groupManage/cellTemplates/groupUpdate/groupUpdateRightNameView.html",filter:{priority:200,type:uiGridConstants.filter.CONTAINS}},{field:"displayName",displayName:"Display Name",cellTemplate:"src/ui/admin/groupManage/cellTemplates/groupUpdate/groupUpdateRightDisplayNameView.html",filter:{priority:200,type:uiGridConstants.filter.CONTAINS}},{field:"owner",displayName:"Creator",width:"10%",cellTemplate:"src/ui/admin/groupManage/cellTemplates/groupsView/adminGroupCreatorView.html"},{field:"rightNameSuffix",displayName:"Permissions",enableFiltering:!1,width:"12%",headerCellClass:"text-center",cellTemplate:"src/ui/admin/groupManage/cellTemplates/groupUpdate/groupUpdateRightNameSuffixView.html"}],onRegisterApi:function(gridApi){$scope.gridApi=gridApi,$scope.gridApi.grid.registerRowsProcessor($scope.refilteringGridData,700)},data:allRights});var oldRightNames=[];angular.forEach(groupRights,function(groupRight){oldRightNames.push(groupRight.rightType+groupRight.rightName+groupRight.rightNameSuffix)}),$timeout(function(){markSelectedRows(groupRights,$scope.gridApi.grid.rows)}),$scope.ok=function(){var newRightNames=[],currentRights=getSelectedRights();angular.forEach(currentRights,function(row){newRightNames.push(row.rightType+row.rightName+row.rightNameSuffix)});var finalResult={usersChanged:void 0,rightsChanged:void 0,groupdisplaynameChanged:void 0};if(oldgroupdisplayname!=$scope.groupdisplayname){var groupdisplaynameDefer=$q.defer();Groups.update({},{name:groupname,displayName:$scope.groupdisplayname},function(result){groupdisplaynameDefer.resolve({name:groupname,displayName:$scope.groupdisplayname})},function(result){groupdisplaynameDefer.reject(result)}),finalResult.groupdisplaynameChanged={promise:groupdisplaynameDefer.promise}}if(_.difference($scope.users.old,$scope.users["new"])){var groupUsersPathParam={groupName:groupname},groupUsersDataParam=$scope.users["new"],usersUpdateDefer=$q.defer();GroupUsers.replaceAll(groupUsersPathParam,groupUsersDataParam,function(newUsers){usersUpdateDefer.resolve(newUsers)},function(data){usersUpdateDefer.reject(data)}).$promise;finalResult.usersChanged={promise:usersUpdateDefer.promise}}if(!stringArrayEqual(newRightNames,oldRightNames)){var groupRightsPathParam={groupName:groupname},groupRightsDataParam=[];angular.forEach(getSelectedRights(),function(gridRow){groupRightsDataParam.push({rightName:gridRow.rightName+gridRow.rightNameSuffix,rightType:gridRow.rightType})});var rightsUpdateDefer=$q.defer();GroupRights.replaceAll(groupRightsPathParam,groupRightsDataParam,function(responseGroupRights){var newGroupRights=[],_MANAGE="_MANAGE",_VIEW="_VIEW";angular.forEach(responseGroupRights,function(rawGroup){var rightName=null,rightNameSuffix=null;_.endsWith(rawGroup.rightName,_MANAGE)?(rightName=rawGroup.rightName.slice(0,rawGroup.rightName.length-_MANAGE.length),rightNameSuffix=_MANAGE):_.endsWith(rawGroup.rightName,_VIEW)&&(rightName=rawGroup.rightName.slice(0,rawGroup.rightName.length-_VIEW.length),rightNameSuffix=_VIEW),rawGroup.rightName=rightName,rawGroup.rightNameSuffix=rightNameSuffix,newGroupRights.push(rawGroup)}),rightsUpdateDefer.resolve(newGroupRights)},function(data){rightsUpdateDefer.reject(data)}),finalResult.rightsChanged={promise:rightsUpdateDefer.promise}}$modalInstance.close($q.resolve(finalResult))},$scope.cancel=function(){$modalInstance.dismiss()}})}(),function(){"use strict";angular.module("pr.ui.admin").controller("GroupDeleteDialogController",function($scope,$modalInstance,$q){$scope.close=function(){$modalInstance.dismiss("close")},$scope.confirm=function(info){$modalInstance.close($q.resolve({}))}})}(),function(){"use strict";angular.module("pr.ui.admin.resource",["ngResource","pr.api"]).factory("Groups",function($resource,prApi){var nullParamDefaults={},query={method:"GET",
isArray:!0,withCredentials:!0,url:prApi.url+"/groups?right=:type"},add={method:"POST",isArray:!1,withCredentials:!0},remove={method:"DELETE",isArray:!1,withCredentials:!0},update={method:"PUT",isArray:!1,withCredentials:!0},options={query:query,add:add,remove:remove,update:update};return $resource(prApi.url+"/groups/:groupName",nullParamDefaults,options)}).factory("GroupUsers",function($resource,prApi){var nullParamDefaults={},query={method:"GET",isArray:!0,withCredentials:!0,cache:!1},replaceAll={method:"PUT",withCredentials:!0,isArray:!0},options={query:query,replaceAll:replaceAll};return $resource(prApi.url+"/groups/:groupName/users",nullParamDefaults,options)}).factory("GroupRights",function($resource,prApi){var nullParamDefaults={},query={method:"GET",isArray:!0,withCredentials:!0},replaceAll={method:"PUT",withCredentials:!0,isArray:!0},options={query:query,replaceAll:replaceAll};return $resource(prApi.url+"/groups/:groupName/rights",nullParamDefaults,options)}).factory("Datasources",function($resource,$http,prApi){var nullParamDefaults={},query={method:"GET",isArray:!0,withCredentials:!0,url:prApi.url+"/datasources?right=:type"},add={method:"POST",isArray:!1,withCredentials:!0},update={method:"PUT",isArray:!1,withCredentials:!0},remove={method:"DELETE",isArray:!1,withCredentials:!0,url:prApi.url+"/datasources/:names"},options={query:query,add:add,remove:remove,update:update};return $resource(prApi.url+"/datasources",nullParamDefaults,options)}).factory("SysRights",function($resource,$http,prApi){var nullParamDefaults={},query={method:"GET",isArray:!0,withCredentials:!0},options={query:query};return $resource(prApi.url+"/sysrights",nullParamDefaults,options)})}();
//# sourceMappingURL=app.min.js.map